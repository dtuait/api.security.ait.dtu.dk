"""Utilities for configuring HTTP requests to Microsoft Graph.

This module provides a shared :func:`graph_request` helper that wraps the
`requests` library with a connection pool configured to enforce a bounded
number of retries.  Without this, transient DNS or connectivity issues may
cause the default urllib3 behaviour to retry several times before surfacing a
``Max retries exceeded`` error.  By centralising the configuration we ensure
that every Graph request honours the same retry policy and that the limits can
be tuned through environment variables when necessary.
"""

from __future__ import annotations

import os
from functools import lru_cache

import requests
from requests import Response
from requests.adapters import HTTPAdapter
from urllib3.util import Retry

_DEFAULT_MAX_RETRIES = 1
_DEFAULT_BACKOFF = 0.1
_ALLOWED_METHODS = frozenset({"DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"})


def _read_int(env_name: str, default: int) -> int:
    """Read a non-negative integer from an environment variable."""

    raw_value = os.getenv(env_name)
    if raw_value is None:
        return default
    try:
        value = int(raw_value)
    except (TypeError, ValueError):
        return default
    return max(0, value)


def _read_float(env_name: str, default: float) -> float:
    """Read a non-negative float from an environment variable."""

    raw_value = os.getenv(env_name)
    if raw_value is None:
        return default
    try:
        value = float(raw_value)
    except (TypeError, ValueError):
        return default
    return max(0.0, value)


@lru_cache(maxsize=1)
def _get_session() -> requests.Session:
    """Return a cached ``requests.Session`` configured for Graph API calls."""

    max_retries = _read_int("GRAPH_HTTP_MAX_RETRIES", _DEFAULT_MAX_RETRIES)
    backoff_factor = _read_float("GRAPH_HTTP_BACKOFF_FACTOR", _DEFAULT_BACKOFF)

    if max_retries == 0:
        backoff_factor = 0.0

    retry_config = Retry(
        total=max_retries,
        connect=max_retries,
        read=max_retries,
        status=max_retries,
        allowed_methods=_ALLOWED_METHODS,
        backoff_factor=backoff_factor,
        respect_retry_after_header=True,
        raise_on_status=False,
    )

    adapter = HTTPAdapter(max_retries=retry_config)
    session = requests.Session()
    session.mount("https://", adapter)
    session.mount("http://", adapter)
    return session


def graph_request(method: str, url: str, *args, **kwargs) -> Response:
    """Send an HTTP request using the shared Graph session.

    Parameters
    ----------
    method:
        HTTP method (``GET``, ``POST`` ...) used for the request.
    url:
        The request URL.
    *args, **kwargs:
        Additional arguments forwarded to :meth:`requests.Session.request`.

    Returns
    -------
    requests.Response
        The HTTP response generated by the request.
    """

    session = _get_session()
    return session.request(method=method.upper(), url=url, *args, **kwargs)


