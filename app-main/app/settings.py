"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import os
import warnings

# Load .env file
# Import load_dotenv
from dotenv import load_dotenv
dotenv_path = '/usr/src/project/.devcontainer/.env'
load_dotenv(dotenv_path=dotenv_path)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# settings.py

# AD group cache timeout (15 minutes)
AD_GROUP_CACHE_TIMEOUT = 15 * 60  # This


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get secret key from .env file
SECRET_KEY = os.getenv('DJANGO_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


# CAS_SERVER_URL = 'https://auth2.dtu.dk/dtu/' # with multifactor
# CAS_VERSION = '2'
# CAS_REDIRECT_URL = '/login-redirector/'

AZURE_AD = {
    'TENANT_ID': os.getenv('AZURE_TENANT_ID'),
    'CLIENT_ID': os.getenv('AIT_SOC_MSAL_VICRE_CLIENT_ID'),
    'CLIENT_SECRET': os.getenv('AIT_SOC_MSAL_VICRE_MSAL_SECRET_VALUE'),
    'REDIRECT_URI': 'https://api.security.ait.dtu.dk/auth/callback', # Update with actual redirect URI
    'AUTHORITY': f'https://login.microsoftonline.com/{os.getenv("AZURE_TENANT_ID")}',
    'SCOPE': ['User.Read'] # Add other scopes if needed
}

# 'HOST': os.getenv('MYSQL_HOST'),

ALLOWED_HOSTS = [
    'localhost',
    '192.38.87.230',
    'api.security.ait.dtu.dk',
    'beta-api.security.ait.dtu.dk',
]


CSRF_COOKIE_DOMAIN = 'api.security.ait.dtu.dk'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 3600  # This sets the duration for one hour, adjust as needed.
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_SSL_REDIRECT = False
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'sccm',
    'drf_yasg',
    'app_mod',
    'myview',
    'active_directory',
    'misc',
    'chatgpt_app',
    'defender',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'myview.middleware.AccessControlMiddleware',
]


ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'



POSTGRES_REQUIRED_ENV_VARS = (
    'POSTGRES_DB',
    'POSTGRES_USER',
    'POSTGRES_PASSWORD',
    'POSTGRES_HOST',
)

postgres_configured = all(os.getenv(var) for var in POSTGRES_REQUIRED_ENV_VARS)
postgres_dependencies_available = False

if postgres_configured:
    try:  # Prefer psycopg3 if available
        import psycopg  # type: ignore  # noqa: F401
    except ImportError:
        try:
            import psycopg2  # type: ignore  # noqa: F401
        except ImportError:
            postgres_dependencies_available = False
        else:
            postgres_dependencies_available = True
    else:
        postgres_dependencies_available = True

if postgres_configured and postgres_dependencies_available:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB'),
            'USER': os.getenv('POSTGRES_USER'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
            'HOST': os.getenv('POSTGRES_HOST'),
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
        }
    }
else:
    if postgres_configured and not postgres_dependencies_available:
        warnings.warn(
            'PostgreSQL environment variables are set but the psycopg/psycopg2 package '
            'is not installed. Falling back to SQLite database configuration.'
        )

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# settings.py
TIME_ZONE = 'Europe/Copenhagen'
USE_TZ = True  # Enable timezone support

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join('/mnt/shared-project-data/django/staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join('/mnt/shared-project-data/django/mediafiles')

# Maybe this will be a fix in the future
# # At the end of your settings.py
# if DEBUG:
#     STATIC_URL = '/static/'
#     MEDIA_URL = '/media/'
# else:
#     STATIC_URL = 'https://api.security.ait.dtu.dk//static/'
#     MEDIA_URL = 'https://api.security.ait.dtu.dk//media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'app_mod.authentication.CustomTokenAuthentication',
    ),
}

AUTH_TOKEN_MODEL = 'app_mod.CustomToken'

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'DEFAULT_API_KEY': 'Authorization: Token <token>',
        'USE_SESSION_AUTH': False,  # This will disable the button to log out in Swagger's UI
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
}


LOGIN_URL='/login/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {filename} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',  # Set to DEBUG to capture everything in development
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',  # Set to DEBUG to capture everything in the log file
            'class': 'logging.FileHandler',
            'filename': '/usr/src/project/app-main/django.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # This is the logger for your custom modules/applications
        'myview': {  # Replace 'myview' with your actual app/module name
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,  # Avoid duplicating logs
        },
        # Add additional loggers for other apps you want to log
        'app_mod': {  # Example for another app you may have
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
