"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import os
import sys
import warnings

# Load .env file
from dotenv import load_dotenv

from django.core.exceptions import ImproperlyConfigured


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def _as_bool(value: str | None, default: bool) -> bool:
    """Return a boolean value for environment variables."""

    if value is None:
        return default

    return value.strip().lower() in {"1", "true", "yes", "on"}


def _split_env_list(value: str | None) -> list[str]:
    """Split an environment variable into a list of non-empty strings."""

    if not value:
        return []

    separators = [';', ',']
    for separator in separators:
        value = value.replace(separator, '\n')

    return [item.strip() for item in value.splitlines() if item.strip()]


PROJECT_ROOT = BASE_DIR.parent


def _ensure_storage_dir(
    env_var_name: str,
    *,
    default_path: Path,
    fallback_path: Path,
    description: str,
) -> str:
    """Return a writable directory for static/media storage.

    The function attempts the environment-provided path (if any) followed by the
    default path. If neither of those are writable, a project-local fallback is
    used. This prevents collectstatic from failing in read-only environments.
    """

    candidate_paths: list[Path] = []

    env_value = os.getenv(env_var_name)
    if env_value:
        candidate_paths.append(Path(env_value))

    for path in (default_path, fallback_path):
        if path not in candidate_paths:
            candidate_paths.append(path)

    for path in candidate_paths:
        try:
            path.mkdir(parents=True, exist_ok=True)
        except OSError as exc:
            warnings.warn(
                f"Unable to use {description} directory '{path}': {exc}",
                stacklevel=2,
            )
            continue

        if os.access(path, os.W_OK):
            return str(path)

        warnings.warn(
            f"Unable to use {description} directory '{path}': directory is not writable.",
            stacklevel=2,
        )

    raise ImproperlyConfigured(
        f"No writable {description} directory configured via {env_var_name}."
    )

custom_env_file = os.getenv("DJANGO_ENV_FILE")
candidate_env_paths = []

if custom_env_file:
    custom_env_path = Path(custom_env_file)
    if not custom_env_path.is_absolute():
        custom_env_path = PROJECT_ROOT / custom_env_path
    candidate_env_paths.append(custom_env_path)

candidate_env_paths.extend(
    [
        PROJECT_ROOT / ".env",
        PROJECT_ROOT / ".devcontainer" / ".env",
    ]
)

for env_path in candidate_env_paths:
    if env_path and env_path.exists():
        load_dotenv(dotenv_path=env_path)
        break
else:
    # Fall back to standard .env discovery (no-op if the file does not exist).
    load_dotenv()

# settings.py

# AD group cache timeout (seconds). Default: 15 minutes
try:
    AD_GROUP_CACHE_TIMEOUT = int(os.getenv('AD_GROUP_CACHE_TIMEOUT', str(15 * 60)))
except ValueError:
    AD_GROUP_CACHE_TIMEOUT = 15 * 60

default_group_sync_bases = _split_env_list(os.getenv('AD_GROUP_SYNC_BASE_DNS'))
if not default_group_sync_bases:
    default_group_sync_bases = [
        'OU=API-SECURITY-AIT-DTU-DK,OU=Groups,OU=SOC,OU=CIS,OU=AIT,DC=win,DC=dtu,DC=dk',
    ]

AD_GROUP_SYNC_BASE_DNS = tuple(default_group_sync_bases)
AD_GROUP_SYNC_DELETE_MISSING = _as_bool(os.getenv('AD_GROUP_SYNC_DELETE_MISSING'), True)
AD_GROUP_AUTO_SYNC_ENABLED = _as_bool(os.getenv('AD_GROUP_AUTO_SYNC_ENABLED'), False)
AD_GROUP_SYNC_REFRESH_MEMBERS = _as_bool(os.getenv('AD_GROUP_SYNC_REFRESH_MEMBERS'), False)

default_it_staff_groups = _split_env_list(os.getenv('IT_STAFF_API_GROUPS'))
if not default_it_staff_groups:
    default_it_staff_groups = [
        'win.dtu.dk/AIT/CIS/SOC/Groups/API-SECURITY-AIT-DTU-DK/AIT-CIS-SOC-MFAReset-AIT',
        'win.dtu.dk/AIT/CIS/SOC/Groups/API-SECURITY-AIT-DTU-DK/AIT-CIS-SOC-MFAReset-BIO',
        'win.dtu.dk/AIT/CIS/SOC/Groups/API-SECURITY-AIT-DTU-DK/AIT-CIS-SOC-MFAReset-NNFCB',
        'win.dtu.dk/AIT/CIS/SOC/Groups/API-SECURITY-AIT-DTU-DK/AIT-CIS-SOC-MFAReset-SUS',
        'win.dtu.dk/AIT/CIS/SOC/Groups/API-SECURITY-AIT-DTU-DK/AIT-CIS-SOC-MFAReset-COMP',
        'win.dtu.dk/AIT/CIS/SOC/Groups/API-SECURITY-AIT-DTU-DK/AIT-CIS-SOC-MFAReset-CME',
    ]

IT_STAFF_API_GROUP_CANONICAL_NAMES = tuple(default_it_staff_groups)

default_ou_limiter_bases = _split_env_list(os.getenv('AD_OU_LIMITER_BASES'))
if not default_ou_limiter_bases:
    default_ou_limiter_bases = ['win.dtu.dk/DTUBaseUsers']

AD_OU_LIMITER_BASES = tuple(default_ou_limiter_bases)
AD_OU_LIMITER_DELETE_MISSING = _as_bool(os.getenv('AD_OU_LIMITER_DELETE_MISSING'), True)

# Have I Been Pwned proxy configuration
HIBP_API_BASE_URL = os.getenv('HIBP_API_BASE_URL', 'https://api.haveibeenpwned.cert.dk')
HIBP_API_KEY = os.getenv('HIBP_API_KEY')
try:
    HIBP_API_TIMEOUT = float(os.getenv('HIBP_API_TIMEOUT', '15'))
except ValueError:
    HIBP_API_TIMEOUT = 15.0
HIBP_API_USER_AGENT = os.getenv('HIBP_API_USER_AGENT', 'AIT-Security-API/1.0')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get secret key from .env file
SECRET_KEY = os.getenv('DJANGO_SECRET')

if not SECRET_KEY and 'test' in sys.argv:
    SECRET_KEY = 'test-secret-key'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = _as_bool(os.getenv("DJANGO_DEBUG"), False)


# CAS_SERVER_URL = 'https://auth2.dtu.dk/dtu/' # with multifactor
# CAS_VERSION = '2'
# CAS_REDIRECT_URL = '/login-redirector/'

_service_url_web = os.getenv('SERVICE_URL_WEB', 'http://localhost:8121').rstrip('/')
_redirect_uri_default = f"{_service_url_web}/auth/callback"

AZURE_AD = {
    'TENANT_ID': os.getenv('AZURE_TENANT_ID'),
    'CLIENT_ID': os.getenv('AIT_SOC_MSAL_VICRE_CLIENT_ID'),
    'CLIENT_SECRET': os.getenv('AIT_SOC_MSAL_VICRE_MSAL_SECRET_VALUE'),
    # Prefer explicit override, fall back to SERVICE_URL_WEB + /auth/callback
    'REDIRECT_URI': os.getenv('AZURE_REDIRECT_URI', _redirect_uri_default),
    'AUTHORITY': f'https://login.microsoftonline.com/{os.getenv("AZURE_TENANT_ID")}',
    'SCOPE': ['User.Read']  # Add other scopes if needed
}

# 'HOST': os.getenv('MYSQL_HOST'),

# Allow configuring the admin URL slug centrally so it can be reused in
# middleware and URL configuration without having to duplicate the literal
# string in multiple places.
ADMIN_URL_PATH = os.getenv(
    "DJANGO_ADMIN_URL",
    "admin/",
)
# Normalise the admin path to always end with a single trailing slash as
# expected by Django's ``path`` helper.
ADMIN_URL_PATH = ADMIN_URL_PATH.strip("/") + "/"

default_allowed_hosts = [
    'localhost',
    '127.0.0.1',
    '192.38.87.230',
    'api.security.ait.dtu.dk',
    'beta-api.security.ait.dtu.dk',
]

allowed_hosts_env = os.getenv('DJANGO_ALLOWED_HOSTS')

if allowed_hosts_env:
    ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_env.split(',') if host.strip()]
else:
    ALLOWED_HOSTS = default_allowed_hosts


default_csrf_domain = os.getenv('DJANGO_CSRF_COOKIE_DOMAIN')
if default_csrf_domain is not None:
    CSRF_COOKIE_DOMAIN = default_csrf_domain or None
else:
    CSRF_COOKIE_DOMAIN = 'api.security.ait.dtu.dk'

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = _as_bool(os.getenv('DJANGO_SESSION_COOKIE_SECURE'), True)
CSRF_COOKIE_SECURE = _as_bool(os.getenv('DJANGO_CSRF_COOKIE_SECURE'), True)
SECURE_HSTS_SECONDS = int(os.getenv('DJANGO_SECURE_HSTS_SECONDS', '3600'))  # This sets the duration for one hour, adjust as needed.
SECURE_HSTS_INCLUDE_SUBDOMAINS = _as_bool(os.getenv('DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS'), True)
SECURE_HSTS_PRELOAD = _as_bool(os.getenv('DJANGO_SECURE_HSTS_PRELOAD'), True)
SECURE_SSL_REDIRECT = _as_bool(os.getenv('DJANGO_SECURE_SSL_REDIRECT'), False)

trusted_origins_env = os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS')
if trusted_origins_env:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in trusted_origins_env.split(',') if origin.strip()]
else:
    candidate_origins = []
    for host in ALLOWED_HOSTS:
        if not host:
            continue
        if host in {'localhost', '127.0.0.1'}:
            candidate_origins.extend([f'http://{host}', f'https://{host}'])
        else:
            candidate_origins.append(f'https://{host}')

    # Preserve order while removing duplicates
    CSRF_TRUSTED_ORIGINS = list(dict.fromkeys(candidate_origins))
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'sccm',
    'drf_yasg',
    'myview',
    'active_directory',
    'misc',
    'chatgpt_app',
    'graph',
    'defender',
    'hibp',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'myview.middleware.AccessControlMiddleware',
]


ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Caches
CACHE_URL = os.getenv('CACHE_URL')
REDIS_URL = os.getenv('REDIS_URL')

if CACHE_URL or REDIS_URL:
    cache_location = CACHE_URL or REDIS_URL
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': cache_location,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'IGNORE_EXCEPTIONS': False,
            },
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'myview-locmem-cache',
        }
    }


POSTGRES_REQUIRED_ENV_VARS = (
    'POSTGRES_DB',
    'POSTGRES_USER',
    'POSTGRES_PASSWORD',
    'POSTGRES_HOST',
)

postgres_configured = all(os.getenv(var) for var in POSTGRES_REQUIRED_ENV_VARS)
postgres_dependencies_available = False

if postgres_configured:
    try:  # Prefer psycopg3 if available
        import psycopg  # type: ignore  # noqa: F401
    except ImportError:
        try:
            import psycopg2  # type: ignore  # noqa: F401
        except ImportError:
            postgres_dependencies_available = False
        else:
            postgres_dependencies_available = True
    else:
        postgres_dependencies_available = True

if postgres_configured:
    if not postgres_dependencies_available:
        raise ImproperlyConfigured(
            'PostgreSQL settings detected but psycopg/psycopg2 is not installed. '
            'Install the dependency or clear the POSTGRES_* environment variables.'
        )

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB'),
            'USER': os.getenv('POSTGRES_USER'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
            'HOST': os.getenv('POSTGRES_HOST'),
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# settings.py
TIME_ZONE = 'Europe/Copenhagen'
USE_TZ = True  # Enable timezone support

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = _ensure_storage_dir(
    'DJANGO_STATIC_ROOT',
    default_path=Path('/mnt/shared-project-data/django/staticfiles'),
    fallback_path=BASE_DIR / 'staticfiles',
    description='static',
)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = _ensure_storage_dir(
    'DJANGO_MEDIA_ROOT',
    default_path=Path('/mnt/shared-project-data/django/mediafiles'),
    fallback_path=BASE_DIR / 'media',
    description='media',
)

# Maybe this will be a fix in the future
# # At the end of your settings.py
# if DEBUG:
#     STATIC_URL = '/static/'
#     MEDIA_URL = '/media/'
# else:
#     STATIC_URL = 'https://api.security.ait.dtu.dk//static/'
#     MEDIA_URL = 'https://api.security.ait.dtu.dk//media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'DEFAULT_API_KEY': 'Authorization:<token>',
        'USE_SESSION_AUTH': False,  # This will disable the button to log out in Swagger's UI
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
}


LOGIN_URL='/login/'

_git_metadata_env = os.getenv("DJANGO_GIT_METADATA_FILE")

if _git_metadata_env:
    GIT_METADATA_FILE = Path(_git_metadata_env)
else:
    GIT_METADATA_FILE = PROJECT_ROOT / "git-metadata.json"

LOG_DIR = PROJECT_ROOT / "logs"
LOG_DIR.mkdir(parents=True, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {filename} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',  # Set to DEBUG to capture everything in development
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',  # Set to DEBUG to capture everything in the log file
            'class': 'logging.FileHandler',
            'filename': str(LOG_DIR / 'django.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # This is the logger for your custom modules/applications
        'myview': {  # Replace 'myview' with your actual app/module name
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,  # Avoid duplicating logs
        },
        # Add additional loggers for other apps you want to log
    },
}
