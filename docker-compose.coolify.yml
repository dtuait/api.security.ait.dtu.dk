version: "3.9"

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${COOLIFY_IMAGE:-api-security-ait-dtu-dk-web}
    environment:
      SERVICE_FQDN_WEB: ${SERVICE_FQDN_WEB:-api.security.ait.dtu.dk}
      SERVICE_URL_WEB: ${SERVICE_URL_WEB:-https://api.security.ait.dtu.dk}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-api.security.ait.dtu.dk}
      DJANGO_CSRF_TRUSTED_ORIGINS: ${DJANGO_CSRF_TRUSTED_ORIGINS:-https://api.security.ait.dtu.dk}
      DJANGO_CSRF_COOKIE_DOMAIN: ${DJANGO_CSRF_COOKIE_DOMAIN:-}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-false}
      DJANGO_STATIC_ROOT: /data/static
      DJANGO_MEDIA_ROOT: /data/media
      DJANGO_SESSION_COOKIE_SECURE: ${DJANGO_SESSION_COOKIE_SECURE:-true}
      DJANGO_CSRF_COOKIE_SECURE: ${DJANGO_CSRF_COOKIE_SECURE:-true}
      DJANGO_SECURE_SSL_REDIRECT: ${DJANGO_SECURE_SSL_REDIRECT:-true}
      DJANGO_SECRET: ${DJANGO_SECRET:?DJANGO_SECRET must be set}
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_data:/data/static
      - media_data:/data/media
    expose:
      - "8121"
    restart: unless-stopped
    networks:
      - internal
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.api_security.rule=Host(`${TRAEFIK_HOST:-api.example.com}`)
      - traefik.http.routers.api_security.entrypoints=${TRAEFIK_ENTRYPOINT:-websecure}
      - traefik.http.routers.api_security.tls=true
      - traefik.http.routers.api_security.tls.certresolver=${TRAEFIK_CERTRESOLVER:-letsencrypt}
      - traefik.http.services.api_security.loadbalancer.server.port=8121
      - traefik.docker.network=${TRAEFIK_NETWORK:-coolify-network}

  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-please-change-me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-app}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  static_data:
  media_data:

networks:
  internal:
    driver: bridge
  traefik:
    name: ${TRAEFIK_NETWORK:-coolify-network}
    driver: bridge
