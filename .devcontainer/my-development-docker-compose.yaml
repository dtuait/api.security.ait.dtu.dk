
# development command - the only differnce is command in xx-api-security-ait-dtu-dk-app-main is commented out
# docker compose -p dev-api-security-ait-dtu-dk -f ./my-development-docker-compose.yaml up -d
# production command
# docker compose -p prod-api-security-ait-dtu-dk -f ./my-production-docker-compose.yaml up -d

services:
  xx-api-security-ait-dtu-dk-app-main:
    build:
      context: ..
      dockerfile: Dockerfile
      target: development
    image: dtuait/api-security-ait-dtu-dk-app-main:dev-latest
    command: sleep infinity
    env_file:
      - ../.env
    restart: always
    tty: true
    environment:
      DJANGO_MIGRATE: "false"
      DJANGO_COLLECTSTATIC: "false"
    volumes:
      - ..:/app
      - ../shared-project-data:/mnt/shared-project-data
      # - ./entrypoint.sh:/entrypoint.sh # you dont need to mount it since it is already in the image
    networks:
      - shared_network


  xx-api-security-ait-dtu-dk-postgres-service:
    image: postgres:16
    restart: always
    env_file:
      - ../.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - beta-api-security-ait-dtu-dk-postgres-service-volume:/var/lib/postgresql/data
      # If you have Postgres init scripts, mount them here
      # - ../postgres-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - shared_network



networks:
  shared_network:
    external: true

volumes:
  beta-api-security-ait-dtu-dk-postgres-service-volume:
    driver: local
